package com.sbm.mc.sevenroomstoreviewpro.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientVenueStatsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientVenueStatsAllPropertiesEquals(ClientVenueStats expected, ClientVenueStats actual) {
        assertClientVenueStatsAutoGeneratedPropertiesEquals(expected, actual);
        assertClientVenueStatsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientVenueStatsAllUpdatablePropertiesEquals(ClientVenueStats expected, ClientVenueStats actual) {
        assertClientVenueStatsUpdatableFieldsEquals(expected, actual);
        assertClientVenueStatsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientVenueStatsAutoGeneratedPropertiesEquals(ClientVenueStats expected, ClientVenueStats actual) {
        assertThat(expected)
            .as("Verify ClientVenueStats auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientVenueStatsUpdatableFieldsEquals(ClientVenueStats expected, ClientVenueStats actual) {
        assertThat(expected)
            .as("Verify ClientVenueStats relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getTotalSpendLocalperCover())
                        .as("check totalSpendLocalperCover")
                        .isEqualTo(actual.getTotalSpendLocalperCover())
            )
            .satisfies(e -> assertThat(e.getLastVisitDate()).as("check lastVisitDate").isEqualTo(actual.getLastVisitDate()))
            .satisfies(e -> assertThat(e.getTotalCancellations()).as("check totalCancellations").isEqualTo(actual.getTotalCancellations()))
            .satisfies(e -> assertThat(e.getTotalCovers()).as("check totalCovers").isEqualTo(actual.getTotalCovers()))
            .satisfies(e -> assertThat(e.getAvgRating()).as("check avgRating").isEqualTo(actual.getAvgRating()))
            .satisfies(e -> assertThat(e.getTotalSpendperCover()).as("check totalSpendperCover").isEqualTo(actual.getTotalSpendperCover()))
            .satisfies(e -> assertThat(e.getTotalSpend()).as("check totalSpend").isEqualTo(actual.getTotalSpend()))
            .satisfies(e -> assertThat(e.getTotalNoShows()).as("check totalNoShows").isEqualTo(actual.getTotalNoShows()))
            .satisfies(e -> assertThat(e.getNumRatings()).as("check numRatings").isEqualTo(actual.getNumRatings()))
            .satisfies(e -> assertThat(e.getTotalSpendPerVisit()).as("check totalSpendPerVisit").isEqualTo(actual.getTotalSpendPerVisit()))
            .satisfies(e -> assertThat(e.getTotalSpendLocal()).as("check totalSpendLocal").isEqualTo(actual.getTotalSpendLocal()))
            .satisfies(
                e ->
                    assertThat(e.getTotalSpendLocalPerVisit())
                        .as("check totalSpendLocalPerVisit")
                        .isEqualTo(actual.getTotalSpendLocalPerVisit())
            )
            .satisfies(e -> assertThat(e.getTotalVisits()).as("check totalVisits").isEqualTo(actual.getTotalVisits()))
            .satisfies(e -> assertThat(e.getGrossTotal()).as("check grossTotal").isEqualTo(actual.getGrossTotal()))
            .satisfies(e -> assertThat(e.getTotalOrderCount()).as("check totalOrderCount").isEqualTo(actual.getTotalOrderCount()))
            .satisfies(
                e ->
                    assertThat(e.getTotalOrderCancellations())
                        .as("check totalOrderCancellations")
                        .isEqualTo(actual.getTotalOrderCancellations())
            )
            .satisfies(e -> assertThat(e.getTotalOrderSpend()).as("check totalOrderSpend").isEqualTo(actual.getTotalOrderSpend()))
            .satisfies(e -> assertThat(e.getGrossOrderTotal()).as("check grossOrderTotal").isEqualTo(actual.getGrossOrderTotal()))
            .satisfies(
                e -> assertThat(e.getTotalOrderSpendLocal()).as("check totalOrderSpendLocal").isEqualTo(actual.getTotalOrderSpendLocal())
            )
            .satisfies(e -> assertThat(e.getLastOrderDate()).as("check lastOrderDate").isEqualTo(actual.getLastOrderDate()))
            .satisfies(e -> assertThat(e.getTotalSpendperOrder()).as("check totalSpendperOrder").isEqualTo(actual.getTotalSpendperOrder()))
            .satisfies(
                e ->
                    assertThat(e.getTotalSpendLocalperOrder())
                        .as("check totalSpendLocalperOrder")
                        .isEqualTo(actual.getTotalSpendLocalperOrder())
            )
            .satisfies(e -> assertThat(e.getVenueId()).as("check venueId").isEqualTo(actual.getVenueId()))
            .satisfies(
                e -> assertThat(e.getVenueMarketingOptin()).as("check venueMarketingOptin").isEqualTo(actual.getVenueMarketingOptin())
            )
            .satisfies(
                e -> assertThat(e.getVenueMarketingOptints()).as("check venueMarketingOptints").isEqualTo(actual.getVenueMarketingOptints())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientVenueStatsUpdatableRelationshipsEquals(ClientVenueStats expected, ClientVenueStats actual) {}
}
