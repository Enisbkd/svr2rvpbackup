package com.sbm.mc.sevenroomstoreviewpro.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ResPosTicketAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResPosTicketAllPropertiesEquals(ResPosTicket expected, ResPosTicket actual) {
        assertResPosTicketAutoGeneratedPropertiesEquals(expected, actual);
        assertResPosTicketAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResPosTicketAllUpdatablePropertiesEquals(ResPosTicket expected, ResPosTicket actual) {
        assertResPosTicketUpdatableFieldsEquals(expected, actual);
        assertResPosTicketUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResPosTicketAutoGeneratedPropertiesEquals(ResPosTicket expected, ResPosTicket actual) {
        assertThat(expected)
            .as("Verify ResPosTicket auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResPosTicketUpdatableFieldsEquals(ResPosTicket expected, ResPosTicket actual) {
        assertThat(expected)
            .as("Verify ResPosTicket relevant properties")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getAdminFee()).as("check adminFee").isEqualTo(actual.getAdminFee()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getTableNo()).as("check tableNo").isEqualTo(actual.getTableNo()))
            .satisfies(e -> assertThat(e.getTax()).as("check tax").isEqualTo(actual.getTax()))
            .satisfies(e -> assertThat(e.getBusinessId()).as("check businessId").isEqualTo(actual.getBusinessId()))
            .satisfies(e -> assertThat(e.getTicketId()).as("check ticketId").isEqualTo(actual.getTicketId()))
            .satisfies(e -> assertThat(e.getLocalPosticketId()).as("check localPosticketId").isEqualTo(actual.getLocalPosticketId()))
            .satisfies(e -> assertThat(e.getEmployeeName()).as("check employeeName").isEqualTo(actual.getEmployeeName()))
            .satisfies(e -> assertThat(e.getTotal()).as("check total").isEqualTo(actual.getTotal()))
            .satisfies(e -> assertThat(e.getSubtotal()).as("check subtotal").isEqualTo(actual.getSubtotal()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getServiceCharge()).as("check serviceCharge").isEqualTo(actual.getServiceCharge()))
            .satisfies(e -> assertThat(e.getEndtime()).as("check endtime").isEqualTo(actual.getEndtime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResPosTicketUpdatableRelationshipsEquals(ResPosTicket expected, ResPosTicket actual) {
        assertThat(expected)
            .as("Verify ResPosTicket relationships")
            .satisfies(e -> assertThat(e.getReservation()).as("check reservation").isEqualTo(actual.getReservation()));
    }
}
