package com.sbm.mc.sevenroomstoreviewpro.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VenueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAllPropertiesEquals(Venue expected, Venue actual) {
        assertVenueAutoGeneratedPropertiesEquals(expected, actual);
        assertVenueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAllUpdatablePropertiesEquals(Venue expected, Venue actual) {
        assertVenueUpdatableFieldsEquals(expected, actual);
        assertVenueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueAutoGeneratedPropertiesEquals(Venue expected, Venue actual) {
        assertThat(expected)
            .as("Verify Venue auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueUpdatableFieldsEquals(Venue expected, Venue actual) {
        assertThat(expected)
            .as("Verify Venue relevant properties")
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getBlackLogo()).as("check blackLogo").isEqualTo(actual.getBlackLogo()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getCrossStreet()).as("check crossStreet").isEqualTo(actual.getCrossStreet()))
            .satisfies(e -> assertThat(e.getCurrencyCode()).as("check currencyCode").isEqualTo(actual.getCurrencyCode()))
            .satisfies(e -> assertThat(e.getExternalVenueId()).as("check externalVenueId").isEqualTo(actual.getExternalVenueId()))
            .satisfies(e -> assertThat(e.getFullDiningBackend()).as("check fullDiningBackend").isEqualTo(actual.getFullDiningBackend()))
            .satisfies(e -> assertThat(e.getGridEnabled()).as("check gridEnabled").isEqualTo(actual.getGridEnabled()))
            .satisfies(e -> assertThat(e.getVenueId()).as("check venueId").isEqualTo(actual.getVenueId()))
            .satisfies(e -> assertThat(e.getInternalName()).as("check internalName").isEqualTo(actual.getInternalName()))
            .satisfies(e -> assertThat(e.getMembershipEnabled()).as("check membershipEnabled").isEqualTo(actual.getMembershipEnabled()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getNeighborhood()).as("check neighborhood").isEqualTo(actual.getNeighborhood()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getPolicy()).as("check policy").isEqualTo(actual.getPolicy()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getPrimaryColor()).as("check primaryColor").isEqualTo(actual.getPrimaryColor()))
            .satisfies(e -> assertThat(e.getSecondaryColor()).as("check secondaryColor").isEqualTo(actual.getSecondaryColor()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(
                e ->
                    assertThat(e.getUniqueConfirmationPrefix())
                        .as("check uniqueConfirmationPrefix")
                        .isEqualTo(actual.getUniqueConfirmationPrefix())
            )
            .satisfies(e -> assertThat(e.getVenueClass()).as("check venueClass").isEqualTo(actual.getVenueClass()))
            .satisfies(e -> assertThat(e.getVenueGroupId()).as("check venueGroupId").isEqualTo(actual.getVenueGroupId()))
            .satisfies(e -> assertThat(e.getVenueGroupName()).as("check venueGroupName").isEqualTo(actual.getVenueGroupName()))
            .satisfies(e -> assertThat(e.getVenueUrlKey()).as("check venueUrlKey").isEqualTo(actual.getVenueUrlKey()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()))
            .satisfies(e -> assertThat(e.getWhiteLogo()).as("check whiteLogo").isEqualTo(actual.getWhiteLogo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueUpdatableRelationshipsEquals(Venue expected, Venue actual) {}
}
