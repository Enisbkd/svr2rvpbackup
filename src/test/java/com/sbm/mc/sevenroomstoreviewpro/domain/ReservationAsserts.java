package com.sbm.mc.sevenroomstoreviewpro.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReservationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationAllPropertiesEquals(Reservation expected, Reservation actual) {
        assertReservationAutoGeneratedPropertiesEquals(expected, actual);
        assertReservationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationAllUpdatablePropertiesEquals(Reservation expected, Reservation actual) {
        assertReservationUpdatableFieldsEquals(expected, actual);
        assertReservationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationAutoGeneratedPropertiesEquals(Reservation expected, Reservation actual) {
        assertThat(expected)
            .as("Verify Reservation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationUpdatableFieldsEquals(Reservation expected, Reservation actual) {
        assertThat(expected)
            .as("Verify Reservation relevant properties")
            .satisfies(e -> assertThat(e.getResvId()).as("check resvId").isEqualTo(actual.getResvId()))
            .satisfies(e -> assertThat(e.getCreated()).as("check created").isEqualTo(actual.getCreated()))
            .satisfies(e -> assertThat(e.getUpdated()).as("check updated").isEqualTo(actual.getUpdated()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getVenueGroupClientId()).as("check venueGroupClientId").isEqualTo(actual.getVenueGroupClientId()))
            .satisfies(e -> assertThat(e.getVenueGroupId()).as("check venueGroupId").isEqualTo(actual.getVenueGroupId()))
            .satisfies(e -> assertThat(e.getVenueId()).as("check venueId").isEqualTo(actual.getVenueId()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getDuration()).as("check duration").isEqualTo(actual.getDuration()))
            .satisfies(e -> assertThat(e.getCheckNumbers()).as("check checkNumbers").isEqualTo(actual.getCheckNumbers()))
            .satisfies(e -> assertThat(e.getShiftCategory()).as("check shiftCategory").isEqualTo(actual.getShiftCategory()))
            .satisfies(e -> assertThat(e.getShiftPersistentId()).as("check shiftPersistentId").isEqualTo(actual.getShiftPersistentId()))
            .satisfies(e -> assertThat(e.getMaxGuests()).as("check maxGuests").isEqualTo(actual.getMaxGuests()))
            .satisfies(e -> assertThat(e.getMfratioMale()).as("check mfratioMale").isEqualTo(actual.getMfratioMale()))
            .satisfies(e -> assertThat(e.getMfratioFemale()).as("check mfratioFemale").isEqualTo(actual.getMfratioFemale()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getStatusDisplay()).as("check statusDisplay").isEqualTo(actual.getStatusDisplay()))
            .satisfies(e -> assertThat(e.getStatusSimple()).as("check statusSimple").isEqualTo(actual.getStatusSimple()))
            .satisfies(e -> assertThat(e.getAccessPersistentId()).as("check accessPersistentId").isEqualTo(actual.getAccessPersistentId()))
            .satisfies(e -> assertThat(e.getArrivedGuests()).as("check arrivedGuests").isEqualTo(actual.getArrivedGuests()))
            .satisfies(e -> assertThat(e.getIsvip()).as("check isvip").isEqualTo(actual.getIsvip()))
            .satisfies(e -> assertThat(e.getBookedby()).as("check bookedby").isEqualTo(actual.getBookedby()))
            .satisfies(
                e -> assertThat(e.getClientReferenceCode()).as("check clientReferenceCode").isEqualTo(actual.getClientReferenceCode())
            )
            .satisfies(e -> assertThat(e.getLastname()).as("check lastname").isEqualTo(actual.getLastname()))
            .satisfies(e -> assertThat(e.getFirstname()).as("check firstname").isEqualTo(actual.getFirstname()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getAddress2()).as("check address2").isEqualTo(actual.getAddress2()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getLoyaltyId()).as("check loyaltyId").isEqualTo(actual.getLoyaltyId()))
            .satisfies(e -> assertThat(e.getLoyaltyRank()).as("check loyaltyRank").isEqualTo(actual.getLoyaltyRank()))
            .satisfies(e -> assertThat(e.getLoyaltyTier()).as("check loyaltyTier").isEqualTo(actual.getLoyaltyTier()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getArrivalTime()).as("check arrivalTime").isEqualTo(actual.getArrivalTime()))
            .satisfies(e -> assertThat(e.getSeatedTime()).as("check seatedTime").isEqualTo(actual.getSeatedTime()))
            .satisfies(e -> assertThat(e.getLeftTime()).as("check leftTime").isEqualTo(actual.getLeftTime()))
            .satisfies(e -> assertThat(e.getClientRequests()).as("check clientRequests").isEqualTo(actual.getClientRequests()))
            .satisfies(e -> assertThat(e.getComps()).as("check comps").isEqualTo(actual.getComps()))
            .satisfies(e -> assertThat(e.getCompsPriceType()).as("check compsPriceType").isEqualTo(actual.getCompsPriceType()))
            .satisfies(e -> assertThat(e.getCostOption()).as("check costOption").isEqualTo(actual.getCostOption()))
            .satisfies(e -> assertThat(e.getPolicy()).as("check policy").isEqualTo(actual.getPolicy()))
            .satisfies(e -> assertThat(e.getMinPrice()).as("check minPrice").isEqualTo(actual.getMinPrice()))
            .satisfies(e -> assertThat(e.getPrePayment()).as("check prePayment").isEqualTo(actual.getPrePayment()))
            .satisfies(e -> assertThat(e.getOnsitePayment()).as("check onsitePayment").isEqualTo(actual.getOnsitePayment()))
            .satisfies(e -> assertThat(e.getTotalPayment()).as("check totalPayment").isEqualTo(actual.getTotalPayment()))
            .satisfies(e -> assertThat(e.getPaidBy()).as("check paidBy").isEqualTo(actual.getPaidBy()))
            .satisfies(e -> assertThat(e.getServedBy()).as("check servedBy").isEqualTo(actual.getServedBy()))
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getProblems()).as("check problems").isEqualTo(actual.getProblems()))
            .satisfies(e -> assertThat(e.getAutoAssignments()).as("check autoAssignments").isEqualTo(actual.getAutoAssignments()))
            .satisfies(e -> assertThat(e.getExternalClientId()).as("check externalClientId").isEqualTo(actual.getExternalClientId()))
            .satisfies(e -> assertThat(e.getExternalId()).as("check externalId").isEqualTo(actual.getExternalId()))
            .satisfies(
                e -> assertThat(e.getExternalReferenceCode()).as("check externalReferenceCode").isEqualTo(actual.getExternalReferenceCode())
            )
            .satisfies(e -> assertThat(e.getExternalUserId()).as("check externalUserId").isEqualTo(actual.getExternalUserId()))
            .satisfies(
                e -> assertThat(e.getModifyReservationLink()).as("check modifyReservationLink").isEqualTo(actual.getModifyReservationLink())
            )
            .satisfies(e -> assertThat(e.getReferenceCode()).as("check referenceCode").isEqualTo(actual.getReferenceCode()))
            .satisfies(
                e -> assertThat(e.getReservationSmsOptin()).as("check reservationSmsOptin").isEqualTo(actual.getReservationSmsOptin())
            )
            .satisfies(e -> assertThat(e.getReservationType()).as("check reservationType").isEqualTo(actual.getReservationType()))
            .satisfies(e -> assertThat(e.getSendReminderEmail()).as("check sendReminderEmail").isEqualTo(actual.getSendReminderEmail()))
            .satisfies(e -> assertThat(e.getSendreminderSms()).as("check sendreminderSms").isEqualTo(actual.getSendreminderSms()))
            .satisfies(e -> assertThat(e.getSourceClientId()).as("check sourceClientId").isEqualTo(actual.getSourceClientId()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReservationUpdatableRelationshipsEquals(Reservation expected, Reservation actual) {}
}
