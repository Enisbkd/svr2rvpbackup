package com.sbm.mc.sevenroomstoreviewpro.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientPhotoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientPhotoAllPropertiesEquals(ClientPhoto expected, ClientPhoto actual) {
        assertClientPhotoAutoGeneratedPropertiesEquals(expected, actual);
        assertClientPhotoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientPhotoAllUpdatablePropertiesEquals(ClientPhoto expected, ClientPhoto actual) {
        assertClientPhotoUpdatableFieldsEquals(expected, actual);
        assertClientPhotoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientPhotoAutoGeneratedPropertiesEquals(ClientPhoto expected, ClientPhoto actual) {
        assertThat(expected)
            .as("Verify ClientPhoto auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientPhotoUpdatableFieldsEquals(ClientPhoto expected, ClientPhoto actual) {
        assertThat(expected)
            .as("Verify ClientPhoto relevant properties")
            .satisfies(e -> assertThat(e.getLarge()).as("check large").isEqualTo(actual.getLarge()))
            .satisfies(e -> assertThat(e.getLargeHeight()).as("check largeHeight").isEqualTo(actual.getLargeHeight()))
            .satisfies(e -> assertThat(e.getLargeWidth()).as("check largeWidth").isEqualTo(actual.getLargeWidth()))
            .satisfies(e -> assertThat(e.getMedium()).as("check medium").isEqualTo(actual.getMedium()))
            .satisfies(e -> assertThat(e.getMediumHeight()).as("check mediumHeight").isEqualTo(actual.getMediumHeight()))
            .satisfies(e -> assertThat(e.getMediumWidth()).as("check mediumWidth").isEqualTo(actual.getMediumWidth()))
            .satisfies(e -> assertThat(e.getSmall()).as("check small").isEqualTo(actual.getSmall()))
            .satisfies(e -> assertThat(e.getSmallHeight()).as("check smallHeight").isEqualTo(actual.getSmallHeight()))
            .satisfies(e -> assertThat(e.getSmallWidth()).as("check smallWidth").isEqualTo(actual.getSmallWidth()))
            .satisfies(e -> assertThat(e.getRaw()).as("check raw").isEqualTo(actual.getRaw()))
            .satisfies(e -> assertThat(e.getCropx()).as("check cropx").isEqualTo(actual.getCropx()))
            .satisfies(e -> assertThat(e.getCropy()).as("check cropy").isEqualTo(actual.getCropy()))
            .satisfies(e -> assertThat(e.getCropHeight()).as("check cropHeight").isEqualTo(actual.getCropHeight()))
            .satisfies(e -> assertThat(e.getCropWidth()).as("check cropWidth").isEqualTo(actual.getCropWidth()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientPhotoUpdatableRelationshipsEquals(ClientPhoto expected, ClientPhoto actual) {}
}
