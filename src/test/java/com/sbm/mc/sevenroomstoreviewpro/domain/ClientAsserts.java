package com.sbm.mc.sevenroomstoreviewpro.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllPropertiesEquals(Client expected, Client actual) {
        assertClientAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllUpdatablePropertiesEquals(Client expected, Client actual) {
        assertClientUpdatableFieldsEquals(expected, actual);
        assertClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAutoGeneratedPropertiesEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableFieldsEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client relevant properties")
            .satisfies(e -> assertThat(e.getClientId()).as("check clientId").isEqualTo(actual.getClientId()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()))
            .satisfies(e -> assertThat(e.getDeletedDate()).as("check deletedDate").isEqualTo(actual.getDeletedDate()))
            .satisfies(e -> assertThat(e.getLastname()).as("check lastname").isEqualTo(actual.getLastname()))
            .satisfies(e -> assertThat(e.getFirstname()).as("check firstname").isEqualTo(actual.getFirstname()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getSalutation()).as("check salutation").isEqualTo(actual.getSalutation()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getBirthdayDay()).as("check birthdayDay").isEqualTo(actual.getBirthdayDay()))
            .satisfies(e -> assertThat(e.getBirthdayMonth()).as("check birthdayMonth").isEqualTo(actual.getBirthdayMonth()))
            .satisfies(e -> assertThat(e.getBirthdayAltMonth()).as("check birthdayAltMonth").isEqualTo(actual.getBirthdayAltMonth()))
            .satisfies(e -> assertThat(e.getAnniversaryDay()).as("check anniversaryDay").isEqualTo(actual.getAnniversaryDay()))
            .satisfies(e -> assertThat(e.getAnniversaryMonth()).as("check anniversaryMonth").isEqualTo(actual.getAnniversaryMonth()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getEmailAlt()).as("check emailAlt").isEqualTo(actual.getEmailAlt()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getPhoneNumberlocale()).as("check phoneNumberlocale").isEqualTo(actual.getPhoneNumberlocale()))
            .satisfies(e -> assertThat(e.getPhoneNumberalt()).as("check phoneNumberalt").isEqualTo(actual.getPhoneNumberalt()))
            .satisfies(
                e -> assertThat(e.getPhoneNumberaltlocale()).as("check phoneNumberaltlocale").isEqualTo(actual.getPhoneNumberaltlocale())
            )
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getAddress2()).as("check address2").isEqualTo(actual.getAddress2()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getIsContactPrivate()).as("check isContactPrivate").isEqualTo(actual.getIsContactPrivate()))
            .satisfies(e -> assertThat(e.getIsOnetimeGuest()).as("check isOnetimeGuest").isEqualTo(actual.getIsOnetimeGuest()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getLoyaltyId()).as("check loyaltyId").isEqualTo(actual.getLoyaltyId()))
            .satisfies(e -> assertThat(e.getLoyaltyRank()).as("check loyaltyRank").isEqualTo(actual.getLoyaltyRank()))
            .satisfies(e -> assertThat(e.getLoyaltyTier()).as("check loyaltyTier").isEqualTo(actual.getLoyaltyTier()))
            .satisfies(e -> assertThat(e.getMarketingOptin()).as("check marketingOptin").isEqualTo(actual.getMarketingOptin()))
            .satisfies(e -> assertThat(e.getMarketingOptints()).as("check marketingOptints").isEqualTo(actual.getMarketingOptints()))
            .satisfies(e -> assertThat(e.getMarketingOptOutts()).as("check marketingOptOutts").isEqualTo(actual.getMarketingOptOutts()))
            .satisfies(e -> assertThat(e.getHasBillingProfile()).as("check hasBillingProfile").isEqualTo(actual.getHasBillingProfile()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getPrivateNotes()).as("check privateNotes").isEqualTo(actual.getPrivateNotes()))
            .satisfies(e -> assertThat(e.getTags()).as("check tags").isEqualTo(actual.getTags()))
            .satisfies(e -> assertThat(e.getTotalVisits()).as("check totalVisits").isEqualTo(actual.getTotalVisits()))
            .satisfies(e -> assertThat(e.getTotalCovers()).as("check totalCovers").isEqualTo(actual.getTotalCovers()))
            .satisfies(e -> assertThat(e.getTotalCancellations()).as("check totalCancellations").isEqualTo(actual.getTotalCancellations()))
            .satisfies(e -> assertThat(e.getTotalNoShows()).as("check totalNoShows").isEqualTo(actual.getTotalNoShows()))
            .satisfies(e -> assertThat(e.getTotalSpend()).as("check totalSpend").isEqualTo(actual.getTotalSpend()))
            .satisfies(e -> assertThat(e.getTotalSpendPerCover()).as("check totalSpendPerCover").isEqualTo(actual.getTotalSpendPerCover()))
            .satisfies(e -> assertThat(e.getTotalspendPerVisit()).as("check totalspendPerVisit").isEqualTo(actual.getTotalspendPerVisit()))
            .satisfies(e -> assertThat(e.getAvgRating()).as("check avgRating").isEqualTo(actual.getAvgRating()))
            .satisfies(e -> assertThat(e.getReferenceCode()).as("check referenceCode").isEqualTo(actual.getReferenceCode()))
            .satisfies(e -> assertThat(e.getExternalUserId()).as("check externalUserId").isEqualTo(actual.getExternalUserId()))
            .satisfies(e -> assertThat(e.getVenueGroupId()).as("check venueGroupId").isEqualTo(actual.getVenueGroupId()))
            .satisfies(e -> assertThat(e.getBirthdayAltDay()).as("check birthdayAltDay").isEqualTo(actual.getBirthdayAltDay()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()))
            .satisfies(e -> assertThat(e.getTotalOrderCount()).as("check totalOrderCount").isEqualTo(actual.getTotalOrderCount()))
            .satisfies(
                e -> assertThat(e.getPreferredLanguageCode()).as("check preferredLanguageCode").isEqualTo(actual.getPreferredLanguageCode())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableRelationshipsEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client relationships")
            .satisfies(e -> assertThat(e.getClientPhoto()).as("check clientPhoto").isEqualTo(actual.getClientPhoto()))
            .satisfies(e -> assertThat(e.getClientVenueStats()).as("check clientVenueStats").isEqualTo(actual.getClientVenueStats()));
    }
}
