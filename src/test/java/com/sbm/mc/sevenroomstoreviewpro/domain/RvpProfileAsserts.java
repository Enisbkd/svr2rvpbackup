package com.sbm.mc.sevenroomstoreviewpro.domain;

import static com.sbm.mc.sevenroomstoreviewpro.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RvpProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpProfileAllPropertiesEquals(RvpProfile expected, RvpProfile actual) {
        assertRvpProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertRvpProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpProfileAllUpdatablePropertiesEquals(RvpProfile expected, RvpProfile actual) {
        assertRvpProfileUpdatableFieldsEquals(expected, actual);
        assertRvpProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpProfileAutoGeneratedPropertiesEquals(RvpProfile expected, RvpProfile actual) {
        assertThat(expected)
            .as("Verify RvpProfile auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpProfileUpdatableFieldsEquals(RvpProfile expected, RvpProfile actual) {
        assertThat(expected)
            .as("Verify RvpProfile relevant properties")
            .satisfies(e -> assertThat(e.getPmsId()).as("check pmsId").isEqualTo(actual.getPmsId()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(
                e -> assertThat(e.getCheckin()).as("check checkin").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getCheckin())
            )
            .satisfies(
                e ->
                    assertThat(e.getCheckout())
                        .as("check checkout")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCheckout())
            )
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpProfileUpdatableRelationshipsEquals(RvpProfile expected, RvpProfile actual) {}
}
